{
	"info": {
		"_postman_id": "70fc00a8-24c4-4ce1-bfc9-27e29f4f6df5",
		"name": "jakarta",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "鉴权相关",
			"item": [
				{
					"name": "获取 Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.status === \"OK\") {",
									"  const data = pm.response.json();",
									"  pm.collectionVariables.set('accessToken', data.accessToken);",
									"  pm.collectionVariables.set('refreshToken', data.refreshToken);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"wxj\", // 用户名, 必填\n  \"password\": \"111\" // 密码, 必填\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"token"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"wxj\", // 用户名, 必填\n  \"password\": \"111\" // 密码, 必填\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/token",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 09 May 2023 09:29:48 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"accessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Ind4aiIsImV4cCI6MTY4MzYyNjM4OCwidHlwZSI6ImFjY2VzcyIsImlzcyI6IuWQtOS7meadsOa8lOekuuezu-e7nyJ9.ZYXs8aBRbUpqMB_8H9iZ7wPTmEB1JluE0UrLF-3CvAg\", // 用于接口访问的 Access Token\n    \"refreshToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Ind4aiIsImV4cCI6MTY4MzYyNjM4OCwidHlwZSI6InJlZnJlc2giLCJpc3MiOiLlkLTku5nmnbDmvJTnpLrns7vnu58ifQ.YAQSybOGzgblgO7nYGkwJiTss85Yz_WHomaVnnayLwI\", // 用于刷新的 Refresh Token\n    \"expiresInSec\": 1800, // Token 多少秒后过期\n    \"username\": \"wxj\", // 用户名\n    \"nickname\": \"吴仙杰\", // 昵称\n    \"authorities\": \"root\" // 以英文逗号分隔的功能权限字符串\n}"
						},
						{
							"name": "统一失败返回格式",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"wxj\", // 用户名, 必填\n  \"password\": \"111 \" // 密码, 必填\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/token",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 09 May 2023 09:31:04 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2023-05-09 17:31:04\", // 请求时间戳\n    \"status\": 401, // HTTP 响应状态码\n    \"error\": \"用户名或密码错误\", // 错误提示信息\n    \"path\": \"/api/v1/token\" // 请求资源路径\n}"
						}
					]
				},
				{
					"name": "刷新 Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.status === \"OK\") {",
									"  const data = pm.response.json();",
									"  pm.collectionVariables.set('accessToken', data.accessToken);",
									"  pm.collectionVariables.set('refreshToken', data.refreshToken);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/token/{{refreshToken}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"token",
								"{{refreshToken}}"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/v1/token/{{refreshToken}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"token",
										"{{refreshToken}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Content-Disposition",
									"value": "inline;filename=f.txt"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 09 May 2023 10:20:58 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"accessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODM2Mjk0NTgsInR5cGUiOiJhY2Nlc3MiLCJpc3MiOiLlkLTku5nmnbDmvJTnpLrns7vnu58iLCJ1c2VybmFtZSI6Ind4aiJ9.Y8T7CR4RvVEPCnnPYtoKd1hSVDh-aX-ORO2KHyU1ZVE\", // 用于接口访问的 Access Token\n    \"refreshToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2ODM2Mjk0NTgsInR5cGUiOiJyZWZyZXNoIiwiaXNzIjoi5ZC05LuZ5p2w5ryU56S657O757ufIiwidXNlcm5hbWUiOiJ3eGoifQ.b3nt5ScEZPAzrzHDZ0Rx9xTuZ93BqWeP_NYtwmk5xNI\", // 用于刷新的 Refresh Token\n    \"expiresInSec\": 1800, // Token 多少秒后过期\n    \"username\": \"wxj\", // 用户名\n    \"nickname\": \"吴仙杰\", // 昵称\n    \"authorities\": \"root\" // 以英文逗号分隔的功能权限字符串\n}"
						}
					]
				},
				{
					"name": "获取权限树",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth-tree",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth-tree"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/auth-tree",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth-tree"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 12 May 2023 05:37:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"1\", // id\n    \"parentId\": \"0\", // 父 id\n    \"weight\": 1, // 节点权重，即顺序，越小优先级越高\n    \"name\": \"根权限\", // 权限名称，用于 UI 展示\n    \"code\": \"root\", // 权限代码，用于代码判断\n    \"children\": [ // 下级节点\n        {\n            \"id\": \"1.1\",\n            \"parentId\": \"1\",\n            \"weight\": 1,\n            \"name\": \"用户管理\",\n            \"code\": \"user\",\n            \"children\": [\n                {\n                    \"id\": \"1.1.1\",\n                    \"parentId\": \"1.1\",\n                    \"weight\": 1,\n                    \"name\": \"查看用户\",\n                    \"code\": \"user_view\"\n                },\n                {\n                    \"id\": \"1.1.2\",\n                    \"parentId\": \"1.1\",\n                    \"weight\": 1,\n                    \"name\": \"新增用户\",\n                    \"code\": \"user_add\"\n                },\n                {\n                    \"id\": \"1.1.3\",\n                    \"parentId\": \"1.1\",\n                    \"weight\": 1,\n                    \"name\": \"编辑用户\",\n                    \"code\": \"user_edit\"\n                },\n                {\n                    \"id\": \"1.1.4\",\n                    \"parentId\": \"1.1\",\n                    \"weight\": 1,\n                    \"name\": \"删除用户\",\n                    \"code\": \"user_del\"\n                },\n                {\n                    \"id\": \"1.1.5\",\n                    \"parentId\": \"1.1\",\n                    \"weight\": 1,\n                    \"name\": \"重置密码\",\n                    \"code\": \"user_reset\"\n                }\n            ]\n        },\n        {\n            \"id\": \"1.2\",\n            \"parentId\": \"1\",\n            \"weight\": 1,\n            \"name\": \"角色管理\",\n            \"code\": \"role\",\n            \"children\": [\n                {\n                    \"id\": \"1.2.1\",\n                    \"parentId\": \"1.2\",\n                    \"weight\": 1,\n                    \"name\": \"查看角色\",\n                    \"code\": \"role_view\"\n                },\n                {\n                    \"id\": \"1.2.2\",\n                    \"parentId\": \"1.2\",\n                    \"weight\": 1,\n                    \"name\": \"新增角色\",\n                    \"code\": \"role_add\"\n                },\n                {\n                    \"id\": \"1.2.3\",\n                    \"parentId\": \"1.2\",\n                    \"weight\": 1,\n                    \"name\": \"编辑角色\",\n                    \"code\": \"role_edit\"\n                },\n                {\n                    \"id\": \"1.2.4\",\n                    \"parentId\": \"1.2\",\n                    \"weight\": 1,\n                    \"name\": \"删除角色\",\n                    \"code\": \"role_del\"\n                }\n            ]\n        },\n        {\n            \"id\": \"1.3\",\n            \"parentId\": \"1\",\n            \"weight\": 1,\n            \"name\": \"操作日志\",\n            \"code\": \"op_log\",\n            \"children\": [\n                {\n                    \"id\": \"1.3.1\",\n                    \"parentId\": \"1.3\",\n                    \"weight\": 1,\n                    \"name\": \"查看日志\",\n                    \"code\": \"op_log_view\"\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "操作日志",
			"item": [
				{
					"name": "获取操作日志列表",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/op-logs?pageNumber=1&pageSize=10&startTime=1970-01-01 00:00:00&endTime=2093-12-31 23:59:59",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"op-logs"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1",
									"description": "页码，必填，值 >= 1"
								},
								{
									"key": "pageSize",
									"value": "10",
									"description": "每页显示条目个数，必填，值 >= 1"
								},
								{
									"key": "startTime",
									"value": "1970-01-01 00:00:00",
									"description": "请求开始时间，必填"
								},
								{
									"key": "endTime",
									"value": "2093-12-31 23:59:59",
									"description": "请求结束时间，必填"
								},
								{
									"key": "clientIp",
									"value": "127",
									"description": "客户端 IP",
									"disabled": true
								},
								{
									"key": "message",
									"value": "登录",
									"description": "操作描述",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/op-logs?pageNumber=1&pageSize=2&startTime=1970-01-01 00:00:00&endTime=2093-12-31 23:59:59&clientIp=127&message=登录",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"op-logs"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "1",
											"description": "页码，必填，值 >= 1"
										},
										{
											"key": "pageSize",
											"value": "2",
											"description": "每页显示条目个数，必填，值 >= 1"
										},
										{
											"key": "startTime",
											"value": "1970-01-01 00:00:00",
											"description": "请求开始时间，必填"
										},
										{
											"key": "endTime",
											"value": "2093-12-31 23:59:59",
											"description": "请求结束时间，必填"
										},
										{
											"key": "clientIp",
											"value": "127",
											"description": "客户端 IP"
										},
										{
											"key": "message",
											"value": "登录",
											"description": "操作描述"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 02:47:37 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"pageNumber\": 1, // 页码\n    \"pageSize\": 2, // 每页显示条目个数\n    \"total\": 2, // 总条目数\n    \"list\": [ // 数据列表\n        {\n            \"id\": 2, // 操作日志 id\n            \"requestTime\": \"2023-05-11 10:46:02\", // 请求时间\n            \"clientIp\": \"127.0.0.1\", // 客户端 IP\n            \"username\": \"wxj\", // 用户名\n            \"message\": \"登录系统\" // 操作描述\n        },\n        {\n            \"id\": 1,\n            \"requestTime\": \"2023-05-10 18:38:20\",\n            \"clientIp\": \"127.0.0.1\",\n            \"username\": \"wxj\",\n            \"message\": \"登录系统\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "用户管理",
			"item": [
				{
					"name": "获取用户列表",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users?pageNumber=1&pageSize=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1",
									"description": "页码，必填，值 >= 1"
								},
								{
									"key": "pageSize",
									"value": "2",
									"description": "每页显示条目个数，必填，值 >= 1"
								},
								{
									"key": "username",
									"value": "wxj",
									"description": "用户名",
									"disabled": true
								},
								{
									"key": "nickname",
									"value": "杰",
									"description": "昵称",
									"disabled": true
								},
								{
									"key": "status",
									"value": "1",
									"description": "账号状态，0：禁用，1：启用",
									"disabled": true
								},
								{
									"key": "roleName",
									"value": "管理",
									"description": "角色名",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/users?pageNumber=1&pageSize=2&username=wxj&nickname=杰&status=1&roleName=管理",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "1",
											"description": "页码，必填，值 >= 1"
										},
										{
											"key": "pageSize",
											"value": "2",
											"description": "每页显示条目个数，必填，值 >= 1"
										},
										{
											"key": "username",
											"value": "wxj",
											"description": "用户名"
										},
										{
											"key": "nickname",
											"value": "杰",
											"description": "昵称"
										},
										{
											"key": "status",
											"value": "1",
											"description": "账号状态，0：禁用，1：启用"
										},
										{
											"key": "roleName",
											"value": "管理",
											"description": "角色名"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 03:27:15 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"pageNumber\": 1, // 页码\n    \"pageSize\": 2, // 每页显示条目个数\n    \"total\": 1, // 总条目数\n    \"list\": [ // 数据列表\n        {\n            \"id\": 1, // 用户 id\n            \"username\": \"wxj\", // 用户名\n            \"nickname\": \"吴仙杰\", // 昵称\n            \"status\": 1, // 账号状态，0：禁用，1：启用\n            \"roleId\": 1, // 角色 id\n            \"roleName\": \"超级管理员\", // 角色名\n            \"updatedAt\": \"2023-05-09 16:15:42\", // 更新时间\n            \"remark\": null // 备注\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "获取用户详情",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/18",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"18"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/users/18",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"18"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2023 06:34:23 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 18, // 用户 id\n    \"username\": \"jason412331231233\", // 用户名\n    \"nickname\": \"杰121233森123\", // 昵称\n    \"status\": 1, // 账号状态，0：禁用，1：启用\n    \"roleId\": 8, // 角色 id\n    \"roleName\": \"测试管理员\", // 角色名称\n    \"fullPath\": \"1.2.6.8\", // 完整路径\n    \"updatedAt\": \"2023-05-23 13:38:50\", // 更新时间\n    \"remark\": null // 备注\n}"
						}
					]
				},
				{
					"name": "新增用户",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"jason\", // 用户名，只能包含中文、数字或 _、且必须以中文或英文开头，必填\n  \"nickname\": \"杰森\", // 昵称，必填\n  \"password\": \"111\", // 密码，必填\n  \"status\": 1, // 账号状态，0：禁用，1：启用，必填\n  \"roleId\": 2, // 角色 id，必填\n  \"remark\": null // 备注\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"jason\", // 用户名，只能包含中文、数字或 _、且必须以中文或英文开头，必填\n  \"nickname\": \"杰森\", // 昵称，必填\n  \"password\": \"111\", // 密码，必填\n  \"status\": 1, // 账号状态，0：禁用，1：启用，必填\n  \"roleId\": 2, // 角色 id，必填\n  \"remark\": null // 备注\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 06:24:45 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "更新用户",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nickname\": \"J 森\", // 昵称，必填\n  \"status\": 0, // 账号状态，0：禁用，1：启用，必填\n  \"roleId\": 2, // 角色 id，必填\n  \"remark\": \"更新杰森数据\" // 备注\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nickname\": \"J 森\", // 昵称，必填\n  \"status\": 0, // 账号状态，0：禁用，1：启用，必填\n  \"roleId\": 2, // 角色 id，必填\n  \"remark\": \"更新杰森数据\" // 备注\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/users/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"2"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 07:25:53 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "修改本账号信息",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nickname\": \"Jason Wu\", // 昵称，必填\n  \"oldPassword\": \"111\", // 旧密码\n  \"newPassword\": \"222\" // 新密码\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/self",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"self"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"nickname\": \"Jason Wu\", // 昵称，必填\n  \"oldPassword\": \"111\", // 旧密码\n  \"newPassword\": \"222\" // 新密码\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/self",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"self"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 08:34:42 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "重置密码",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"222\" // 新密码，必填\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/2/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"2",
								"reset"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"222\" // 新密码，必填\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/users/2/reset",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"2",
										"reset"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 08:51:43 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "删除用户",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/users/3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"3"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Thu, 11 May 2023 09:24:34 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "角色管理",
			"item": [
				{
					"name": "获取角色列表",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 12 May 2023 03:37:33 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2, // 角色 id\n        \"name\": \"管理员\", // 角色名\n        \"authorities\": \"user,role\", // 以英文逗号分隔的功能权限字符串\n        \"parentId\": 1, // 父角色 id\n        \"parentName\": \"超级管理员\", // 父角色名\n        \"updatedAt\": \"2023-05-11 15:55:57\", // 更新时间\n        \"remark\": null // 备注\n    },\n    {\n        \"id\": 3,\n        \"name\": \"用户\",\n        \"authorities\": \"user,role\",\n        \"parentId\": 2,\n        \"parentName\": \"管理员\",\n        \"updatedAt\": \"2023-05-11 15:52:00\",\n        \"remark\": null\n    }\n]"
						}
					]
				},
				{
					"name": "获取角色详情",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/roles/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2023 07:03:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2, // 角色 id\n    \"name\": \"管理员\", // 角色名\n    \"authorities\": \"root\", // 以英文逗号分隔的功能权限字符串\n    \"parentId\": 1, // 父角色 id\n    \"parentName\": \"超级管理员\", // 父角色名\n    \"fullPath\": \"1.2\", // 角色全路径\n    \"updatedAt\": \"2023-05-15 11:53:57\", // 更新旱\n    \"remark\": null // 备注\n}"
						}
					]
				},
				{
					"name": "新增角色",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"测试管理员\", // 角色名，必填\n  \"authorities\": \"user,user_view,user_add,user_edit,user_del,role,role_view,role_add,role_edit,op_log,op_log_view\", // 以英文逗号分隔的功能权限字符串\n  \"parentId\": null, // 父角色 id\n  \"remark\": null // 备注\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"测试管理员\", // 角色名，必填\n  \"authorities\": \"user,user_view,user_add,user_edit,user_del,role,role_view,role_add,role_edit,op_log,op_log_view\", // 以英文逗号分隔的功能权限字符串\n  \"parentId\": null, // 父角色 id\n  \"remark\": null // 备注\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/roles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"roles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Fri, 12 May 2023 07:04:17 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "更新角色",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"测试管理员\", // 角色名，必填\n  \"authorities\": \"user,user_del,role,role_view\", // 以英文逗号分隔的功能权限字符串\n  \"parentId\": 3, // 父角色 id，必填\n  \"remark\": null // 备注\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/roles/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"测试管理员\", // 角色名，必填\n  \"authorities\": \"user,user_del,role,role_view\", // 以英文逗号分隔的功能权限字符串\n  \"parentId\": 3, // 父角色 id\n  \"remark\": null // 备注\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/roles/4",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"4"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Fri, 12 May 2023 09:13:10 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "删除角色",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.raw = jsonMinify(pm.request.body.raw);",
									"",
									"// 去除 JSON 参数注释方法",
									"function jsonMinify(json) {",
									"",
									"  var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,",
									"    in_string = false,",
									"    in_multiline_comment = false,",
									"    in_singleline_comment = false,",
									"    tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc,",
									"    prevFrom",
									"  ;",
									"",
									"  tokenizer.lastIndex = 0;",
									"",
									"  while (tmp = tokenizer.exec(json)) {",
									"    lc = RegExp.leftContext;",
									"    rc = RegExp.rightContext;",
									"    if (!in_multiline_comment && !in_singleline_comment) {",
									"      tmp2 = lc.substring(from);",
									"      if (!in_string) {",
									"        tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g, '');",
									"      }",
									"      new_str[ns++] = tmp2;",
									"    }",
									"    prevFrom = from;",
									"    from = tokenizer.lastIndex;",
									"",
									"    // found a \" character, and we're not currently in",
									"    // a comment? check for previous `\\` escaping immediately",
									"    // leftward adjacent to this match",
									"    if (tmp[0] === '\"' && !in_multiline_comment && !in_singleline_comment) {",
									"      // limit left-context matching to only go back",
									"      // to the position of the last token match",
									"      //",
									"      // see: https://github.com/getify/JSON.minify/issues/64",
									"      lc.lastIndex = prevFrom;",
									"",
									"      // perform leftward adjacent escaping match",
									"      tmp2 = lc.match(/(\\\\)*$/);",
									"      // start of string with \", or unescaped \" character found to end string?",
									"      if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {",
									"        in_string = !in_string;",
									"      }",
									"      from--; // include \" character in next catch",
									"      rc = json.substring(from);",
									"    } else if (tmp[0] === '/*' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = true;",
									"    } else if (tmp[0] === '*/' && !in_string && in_multiline_comment && !in_singleline_comment) {",
									"      in_multiline_comment = false;",
									"    } else if (tmp[0] === '//' && !in_string && !in_multiline_comment && !in_singleline_comment) {",
									"      in_singleline_comment = true;",
									"    } else if ((tmp[0] === '\\n' || tmp[0] === '\\r') && !in_string && !in_multiline_comment && in_singleline_comment) {",
									"      in_singleline_comment = false;",
									"    } else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {",
									"      new_str[ns++] = tmp[0];",
									"    }",
									"  }",
									"  new_str[ns++] = rc;",
									"  return new_str.join('');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/roles/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "成功",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/roles/4",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"roles",
										"4"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Date",
									"value": "Fri, 12 May 2023 10:45:30 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "获取项目版本号",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/v1/version",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"version"
					]
				}
			},
			"response": [
				{
					"name": "成功",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/version",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Sat, 13 May 2023 14:11:45 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"version\": \"v1.0.0\", // 版本号\n    \"appName\": \"吴仙杰演示系统\", // 应用号\n    \"developer\": \"吴仙杰\" // 开发者\n}"
				}
			]
		},
		{
			"name": "用完即删",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/test/3-rd",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"test",
						"3-rd"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8090",
			"type": "default"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		}
	]
}