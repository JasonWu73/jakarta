<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.0.6</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>net.wuxianjie</groupId>
  <artifactId>spring-boot-web</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <properties>
    <java.version>17</java.version>

    <jasypt.version>3.0.5</jasypt.version>
  </properties>

  <dependencies>
    <!-- 一个小而全的 Java 工具类库 -->
    <dependency>
      <groupId>cn.hutool</groupId>
      <artifactId>hutool-all</artifactId>
      <version>5.8.16</version>
    </dependency>

    <!-- Spring Boot 项目配置文件的加密库，需要与对应的 Maven 插件一起使用 -->
    <dependency>
      <groupId>com.github.ulisesbocchio</groupId>
      <artifactId>jasypt-spring-boot-starter</artifactId>
      <version>${jasypt.version}</version>
    </dependency>

    <!-- MyBatis 在 Spring Boot 中的整合 -->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>3.0.1</version>
    </dependency>

    <!-- MySQL JDBC 驱动 -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
    </dependency>

    <!-- Spring Boot Web 项目开发（Spring MVC、内嵌 Tomcat 等） -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Security 在 Spring Boot 中的整合 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Hibernate Validator 等在 Spring Boot 中的使用 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Spring Boot AOP 开发 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <!-- 为项目配置文件生成自定义配置项 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- 简化 Java 代码 -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Spring Boot 测试框架 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- 最终打包后的项目名 -->
    <finalName>spring-boot-web</finalName>

    <!-- 自定义资源文件配置 -->
    <resources>
      <!-- 将源码中的 XML 打包进 Classpath，从而使得 Mapper.xml 可以与 Java 类写在一起 -->
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.java</include>
          <include>**/*.xml</include>
        </includes>
      </resource>

      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>

    <plugins>
      <!-- Spring Boot Maven 插件 -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>

      <!--
      Jasypt Maven 插件（需要在项目中添加对应的 Compile 依赖）：

      1、加密指定的原始字符串：
      `mvn jasypt:encrypt-value \
        -Djasypt.encryptor.password=wxj#secret_ \
        -Djasypt.plugin.value=pass123`
       ->
      `ENC(KOTlCZ7eoNB0p1NfdIyj/c+k5cA3KgVm5e+Wee0EuU4LaI6WfGOau9PCwCqJxZ0I)`

      2、解密指定的原始字符串：
      `mvn jasypt:decrypt-value \
        -Djasypt.encryptor.password=wxj#secret_ \
        -Djasypt.plugin.value=KOTlCZ7eoNB0p1NfdIyj/c+k5cA3KgVm5e+Wee0EuU4LaI6WfGOau9PCwCqJxZ0I`
      ->
      `pass123`

      3、加密 Spring Boot 配置文件中属性值（`DEC(raw)` -> `ENC(encrypted)`）：
      `mvn jasypt:encrypt -Djasypt.encryptor.password=wxj#secret_`

      3.1、使用新密钥重新加密 Spring Boot 配置文件：
      `mvn jasypt:reencrypt \
        -Djasypt.plugin.old.password=wxj#secret_ \
        -Djasypt.encryptor.password=new-wxj#secret_`

      3.2、解密并打印 Spring Boot 配置文件内容：
      `mvn jasypt:decrypt -Djasypt.encryptor.password=wxj#secret_`

      4、提供密钥以运行 Spring Boot 应用程序：
      `java -Djasypt.encryptor.password=wxj#secret_ -jar spring-boot-web.jar`
      -->
      <plugin>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-maven-plugin</artifactId>
        <version>${jasypt.version}</version>
        <configuration>
          <!-- 默认为 `src/main/resources/application.properties` -->
          <path>file:src/main/resources/application.yml</path>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
